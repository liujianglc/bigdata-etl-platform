# version: '3.8'  # 版本声明已废弃，Docker Compose v2 会自动检测

networks:
  data-pipeline:
    driver: bridge

services:
  # PostgreSQL for Airflow and Hive metastore
  postgres:
    image: docker.1ms.run/postgres:13
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_MULTIPLE_DATABASES: hive_metastore
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres-init:/docker-entrypoint-initdb.d
    networks:
      - data-pipeline
    ports:
      - "${POSTGRES_PORT}:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}"]
      interval: 10s
      retries: 5
      start_period: 5s

  # Redis for Airflow Celery
  redis:
    image: docker.1ms.run/redis:7-alpine
    expose:
      - ${REDIS_PORT}
    networks:
      - data-pipeline
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s



  # HDFS Namenode
  namenode:
    image: docker.1ms.run/bde2020/hadoop-namenode:2.0.0-hadoop3.2.1-java8
    hostname: namenode
    environment:
      - CLUSTER_NAME=${CLUSTER_NAME}
      - CORE_CONF_fs_defaultFS=hdfs://${HDFS_NAMENODE_HOST}:9000
    volumes:
      - hadoop_namenode:/hadoop/dfs/name
      - ./init-hdfs-directories.sh:/opt/init-hdfs-directories.sh
    ports:
      - "${HDFS_UI_PORT}:9870"
      - "${HDFS_NAMENODE_PORT}:9000"
    networks:
      - data-pipeline
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9870/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # HDFS Datanode
  datanode:
    image: docker.1ms.run/bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
    depends_on:
      namenode:
        condition: service_healthy
    environment:
      - CORE_CONF_fs_defaultFS=hdfs://${HDFS_NAMENODE_HOST}:9000
    volumes:
      - hadoop_datanode:/hadoop/dfs/data
    networks:
      - data-pipeline

  # Hive Metastore
  hive-metastore:
    image: docker.1ms.run/bde2020/hive:2.3.2-postgresql-metastore
    depends_on:
      postgres:
        condition: service_healthy
      namenode:
        condition: service_healthy
    environment:
      - CORE_CONF_fs_defaultFS=hdfs://${HDFS_NAMENODE_HOST}:9000
      - HIVE_SITE_CONF_javax_jdo_option_ConnectionURL=jdbc:postgresql://postgres:5432/hive_metastore
      - HIVE_SITE_CONF_javax_jdo_option_ConnectionDriverName=org.postgresql.Driver
      - HIVE_SITE_CONF_javax_jdo_option_ConnectionUserName=${HIVE_METASTORE_USER}
      - HIVE_SITE_CONF_javax_jdo_option_ConnectionPassword=${HIVE_METASTORE_PASSWORD}
      - HIVE_SITE_CONF_hive_metastore_uris=thrift://hive-metastore:9083
    volumes:
      - ./init-hive-metastore.sh:/opt/init-hive-metastore.sh:ro
    command: bash /opt/init-hive-metastore.sh
    ports:
      - "${HIVE_METASTORE_PORT}:9083"
    networks:
      - data-pipeline
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "9083"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Spark Master
  spark-master:
    image: docker.1ms.run/bde2020/spark-master:3.3.0-hadoop3.3
    depends_on:
      namenode:
        condition: service_healthy
    environment:
      - INIT_DAEMON_STEP=setup_spark
      - CORE_CONF_fs_defaultFS=hdfs://${HDFS_NAMENODE_HOST}:9000
      - JAVA_HOME=/usr/lib/jvm/java-8-openjdk
    volumes:
      - ./spark_jobs:/opt/spark-jobs
      - ./config:/opt/spark-config
    ports:
      - "${SPARK_UI_PORT}:8080"
      - "${SPARK_MASTER_PORT}:7077"
    networks:
      - data-pipeline
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Spark Worker
  spark-worker:
    image: docker.1ms.run/bde2020/spark-worker:3.3.0-hadoop3.3
    depends_on:
      spark-master:
        condition: service_healthy
    environment:
      - SPARK_MASTER=spark://${SPARK_MASTER_HOST}:7077
      - CORE_CONF_fs_defaultFS=hdfs://${HDFS_NAMENODE_HOST}:9000
      - SPARK_WORKER_CORES=${SPARK_WORKER_CORES}
      - SPARK_WORKER_MEMORY=${SPARK_WORKER_MEMORY}
      - JAVA_HOME=/usr/lib/jvm/java-8-openjdk
    volumes:
      - ./spark_jobs:/opt/spark-jobs
      - ./config:/opt/spark-config
    networks:
      - data-pipeline

  # Spark Thrift Server for SQL access
  spark-thrift-server:
    image: docker.1ms.run/bde2020/spark-master:3.3.0-hadoop3.3
    depends_on:
      spark-master:
        condition: service_healthy
      hive-metastore:
        condition: service_healthy
    environment:
      - SPARK_MASTER=spark://${SPARK_MASTER_HOST}:7077
      - CORE_CONF_fs_defaultFS=hdfs://${HDFS_NAMENODE_HOST}:9000
      - JAVA_HOME=/usr/lib/jvm/java-8-openjdk
      - HIVE_SITE_CONF_hive_metastore_uris=thrift://hive-metastore:9083
    volumes:
      - ./spark_jobs:/opt/spark-jobs
      - ./config:/opt/spark-config
    ports:
      - "${SPARK_THRIFT_PORT:-10000}:10000"
      - "${SPARK_THRIFT_UI_PORT:-4040}:4040"
    networks:
      - data-pipeline
    command: >
      bash -c "
        /spark/bin/spark-submit \
          --class org.apache.spark.sql.hive.thriftserver.HiveThriftServer2 \
          --master spark://${SPARK_MASTER_HOST}:7077 \
          --conf spark.sql.hive.metastore.uris=thrift://hive-metastore:9083 \
          --conf spark.serializer=org.apache.spark.serializer.KryoSerializer \
          --conf spark.sql.adaptive.enabled=true \
          --conf spark.sql.adaptive.coalescePartitions.enabled=true \
          --hiveconf hive.server2.thrift.port=10000 \
          --hiveconf hive.server2.thrift.bind.host=0.0.0.0
      "
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "10000"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Airflow 初始化服务
  airflow-init:
    build:
      context: .
      dockerfile: Dockerfile.airflow
    depends_on:
      postgres:
        condition: service_healthy
      hive-metastore:
        condition: service_healthy
    environment:
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres/${POSTGRES_DB}
      AIRFLOW__CORE__FERNET_KEY: '${AIRFLOW__CORE__FERNET_KEY}'
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./config:/opt/airflow/config
      - ./plugins:/opt/airflow/plugins
      - ./setup-connections-enhanced.py:/opt/airflow/setup-connections-enhanced.py
      - ./init-airflow-complete.sh:/opt/airflow/init-airflow-complete.sh
    networks:
      - data-pipeline
    user: "0:0"  # 以root用户运行初始化，确保目录权限正确
    command: >
      bash -c "
        # 确保目录存在并设置正确权限
        mkdir -p /opt/airflow/logs /opt/airflow/plugins &&
        chown -R 50000:0 /opt/airflow/logs /opt/airflow/plugins /opt/airflow/dags &&
        chmod -R 775 /opt/airflow/logs /opt/airflow/plugins &&
        # 切换到airflow用户执行初始化
        su airflow -c 'airflow db init' &&
        su airflow -c 'airflow users create --username admin --firstname Admin --lastname User --role Admin --email admin@example.com --password admin123' &&
        su airflow -c 'python /opt/airflow/setup-connections-enhanced.py' &&
        echo 'Airflow 初始化完成'
      "

  # Airflow Webserver
  airflow-webserver:
    build:
      context: .
      dockerfile: Dockerfile.airflow
    depends_on:
      airflow-init:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
    environment:
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres/${POSTGRES_DB}
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres/${POSTGRES_DB}
      AIRFLOW__CELERY__BROKER_URL: redis://redis:${REDIS_PORT}/0
      AIRFLOW__CORE__FERNET_KEY: '${AIRFLOW__CORE__FERNET_KEY}'
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: '${AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION}'
      AIRFLOW__CORE__LOAD_EXAMPLES: '${AIRFLOW__CORE__LOAD_EXAMPLES}'
      AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
      AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
      AIRFLOW__LOGGING__LOGGING_LEVEL: '${LOG_LEVEL}'
      # SQLAlchemy 连接池配置 - 修复事务问题
      AIRFLOW__DATABASE__SQL_ALCHEMY_POOL_SIZE: '10'
      AIRFLOW__DATABASE__SQL_ALCHEMY_MAX_OVERFLOW: '20'
      AIRFLOW__DATABASE__SQL_ALCHEMY_POOL_PRE_PING: 'true'
      AIRFLOW__DATABASE__SQL_ALCHEMY_POOL_RECYCLE: '3600'
      AIRFLOW__DATABASE__SQL_ALCHEMY_ENGINE_ARGS: '{"pool_reset_on_return": "commit"}'
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs:rw
      - ./config:/opt/airflow/config
      - ./plugins:/opt/airflow/plugins
      - ./spark_jobs:/opt/airflow/spark_jobs
    ports:
      - "${AIRFLOW_WEBSERVER_PORT}:8080"
    command: webserver
    user: "50000:0"  # 使用airflow用户ID，组ID为root以确保权限
    networks:
      - data-pipeline
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Airflow Scheduler
  airflow-scheduler:
    build:
      context: .
      dockerfile: Dockerfile.airflow
    depends_on:
      airflow-init:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
    environment:
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres/${POSTGRES_DB}
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres/${POSTGRES_DB}
      AIRFLOW__CELERY__BROKER_URL: redis://redis:${REDIS_PORT}/0
      AIRFLOW__CORE__FERNET_KEY: '${AIRFLOW__CORE__FERNET_KEY}'
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: '${AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION}'
      AIRFLOW__CORE__LOAD_EXAMPLES: '${AIRFLOW__CORE__LOAD_EXAMPLES}'
      AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
      AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
      AIRFLOW__LOGGING__LOGGING_LEVEL: '${LOG_LEVEL}'
      # SQLAlchemy 连接池配置 - 修复事务问题
      AIRFLOW__DATABASE__SQL_ALCHEMY_POOL_SIZE: '10'
      AIRFLOW__DATABASE__SQL_ALCHEMY_MAX_OVERFLOW: '20'
      AIRFLOW__DATABASE__SQL_ALCHEMY_POOL_PRE_PING: 'true'
      AIRFLOW__DATABASE__SQL_ALCHEMY_POOL_RECYCLE: '3600'
      AIRFLOW__DATABASE__SQL_ALCHEMY_ENGINE_ARGS: '{"pool_reset_on_return": "commit"}'
      # 调度器配置优化
      AIRFLOW__SCHEDULER__CATCHUP_BY_DEFAULT: 'false'
      AIRFLOW__SCHEDULER__MAX_TIS_PER_QUERY: '512'
      AIRFLOW__SCHEDULER__PARSING_PROCESSES: '2'
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs:rw
      - ./config:/opt/airflow/config
      - ./plugins:/opt/airflow/plugins
      - ./spark_jobs:/opt/airflow/spark_jobs
    command: scheduler
    user: "50000:0"  # 使用airflow用户ID，组ID为root以确保权限
    networks:
      - data-pipeline
    healthcheck:
      test: ["CMD-SHELL", "airflow jobs check --job-type SchedulerJob --hostname \"$${HOSTNAME}\""]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Airflow Worker
  airflow-worker:
    build:
      context: .
      dockerfile: Dockerfile.airflow
    depends_on:
      airflow-init:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
    environment:
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres/${POSTGRES_DB}
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres/${POSTGRES_DB}
      AIRFLOW__CELERY__BROKER_URL: redis://redis:${REDIS_PORT}/0
      AIRFLOW__CORE__FERNET_KEY: '${AIRFLOW__CORE__FERNET_KEY}'
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: '${AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION}'
      AIRFLOW__CORE__LOAD_EXAMPLES: '${AIRFLOW__CORE__LOAD_EXAMPLES}'
      AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
      AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
      AIRFLOW__LOGGING__LOGGING_LEVEL: '${LOG_LEVEL}'
      # SQLAlchemy 连接池配置 - 修复事务问题
      AIRFLOW__DATABASE__SQL_ALCHEMY_POOL_SIZE: '10'
      AIRFLOW__DATABASE__SQL_ALCHEMY_MAX_OVERFLOW: '20'
      AIRFLOW__DATABASE__SQL_ALCHEMY_POOL_PRE_PING: 'true'
      AIRFLOW__DATABASE__SQL_ALCHEMY_POOL_RECYCLE: '3600'
      AIRFLOW__DATABASE__SQL_ALCHEMY_ENGINE_ARGS: '{"pool_reset_on_return": "commit"}'
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs:rw
      - ./config:/opt/airflow/config
      - ./plugins:/opt/airflow/plugins
      - ./spark_jobs:/opt/airflow/spark_jobs
    command: celery worker
    user: "50000:0"  # 使用airflow用户ID，组ID为root以确保权限
    networks:
      - data-pipeline
    healthcheck:
      test: ["CMD-SHELL", "celery --app airflow.providers.celery.executors.celery_executor.app inspect ping -d celery@$${HOSTNAME}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # HDFS 目录初始化服务
  hdfs-init:
    image: docker.1ms.run/bde2020/hadoop-namenode:2.0.0-hadoop3.2.1-java8
    depends_on:
      namenode:
        condition: service_healthy
      datanode:
        condition: service_started
    environment:
      - CORE_CONF_fs_defaultFS=hdfs://${HDFS_NAMENODE_HOST}:9000
    volumes:
      - ./init-hdfs-directories.sh:/opt/init-hdfs-directories.sh
    networks:
      - data-pipeline
    command: bash /opt/init-hdfs-directories.sh

volumes:
  postgres_data:
  hadoop_namenode:
  hadoop_datanode: